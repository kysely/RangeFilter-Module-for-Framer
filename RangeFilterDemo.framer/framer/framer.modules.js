require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"RangeFilter":[function(require,module,exports){

/*

READ GIVEN RANGE VALUES FROM ›bottom‹ AND ›top‹ KEYS (OPTIONS)
OF THE ›RangeFilter‹ OBJECT.

FOR INTERACTIVITY, THE ›PanEnd‹ EVENT IS PREFERED AS IT WORKS
FOR BOTH DEKSTOP AND TOUCH DEVICES AND ENGAGES EVEN IF A USER
OVERDRAGS MIN/MAX VALUE.

EXAMPLE:
priceyCoats = new RangeFilter
	from: 419
	to: 2499

priceyCoats.on Events.PanEnd, ->
	print "You're seeing coats from $#{priceyCoats.bottom} to $#{priceyCoats.top}"

NOTE:
THE MODULE RETURNS VALUES AS floats (w/ decimal point).
YOU MAY WANT TO ROUND THE VALUES FOR THE USE.
 */
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.RangeFilter = (function(superClass) {
  extend(RangeFilter, superClass);

  function RangeFilter(options) {
    var fromIndicator, giveMeRange, i, j, knob, len, ref, slidFrom, slidTo, sliderHLight, toIndicator;
    if (options == null) {
      options = {};
    }
    this.options = options;
    if (options.from == null) {
      options.from = 1;
    }
    if (options.to == null) {
      options.to = 100;
    }
    if (options.bottom == null) {
      options.bottom = options.from;
    }
    if (options.top == null) {
      options.top = options.to;
    }
    if (options.activeRange == null) {
      options.activeRange = "rgba(0,0,0,0.6)";
    }
    if (options.knobColor == null) {
      options.knobColor = "rgba(239,242,242,1)";
    }
    if (options.knobSize == null) {
      options.knobSize = 80;
    }
    if (options.knobRadius == null) {
      options.knobRadius = options.knobSize / 2;
    }
    if (options.knobBorder == null) {
      options.knobBorder = 2;
    }
    if (options.knobBorderColor == null) {
      options.knobBorderColor = "rgba(0,0,0,0.2)";
    }
    if (options.knobShadowColor == null) {
      options.knobShadowColor = "rgba(201,203,203,0.3)";
    }
    if (options.showValue == null) {
      options.showValue = true;
    }
    if (options.valueColor == null) {
      options.valueColor = "rgb(130,130,130)";
    }
    if (options.valueSize == null) {
      options.valueSize = "34px";
    }
    if (options.currency == null) {
      options.currency = "€";
    }
    if (options.width == null) {
      options.width = 600;
    }
    if (options.height == null) {
      options.height = 12;
    }
    if (options.x == null) {
      options.x = options.knobSize / 2;
    }
    if (options.y == null) {
      options.y = options.knobSize / 2 - options.height / 2;
    }
    if (options.backgroundColor == null) {
      options.backgroundColor = "rgba(239,244,244,1)";
    }
    if (options.borderRadius == null) {
      options.borderRadius = options.height / 2;
    }
    RangeFilter.__super__.constructor.call(this, options);
    if (this.bottom !== this.from || this.top !== this.to) {
      options.initBottom = Utils.modulate(options.bottom, [options.from, options.to], [0, options.width]);
      options.initTop = Utils.modulate(options.top, [options.from, options.to], [0, options.width]);
    } else {
      options.initBottom = 0;
      options.initTop = options.width;
    }
    sliderHLight = new Layer({
      superLayer: this,
      height: this.height,
      width: this.width,
      x: options.initBottom,
      backgroundColor: options.activeRange,
      borderRadius: this.borderRadius
    });
    slidFrom = new Layer({
      superLayer: this,
      height: options.knobSize,
      width: options.knobSize,
      y: -options.knobSize / 2 + options.height / 2,
      backgroundColor: options.knobColor,
      borderRadius: options.knobRadius,
      borderWidth: options.knobBorder,
      borderColor: options.knobBorderColor,
      shadowY: 10,
      shadowBlur: 20,
      shadowColor: options.knobShadowColor
    });
    slidTo = new Layer({
      superLayer: this,
      height: options.knobSize,
      width: options.knobSize,
      y: -options.knobSize / 2 + options.height / 2,
      backgroundColor: options.knobColor,
      borderRadius: options.knobRadius,
      borderWidth: options.knobBorder,
      borderColor: options.knobBorderColor,
      shadowY: 10,
      shadowBlur: 20,
      shadowColor: options.knobShadowColor
    });
    if (options.showValue) {
      fromIndicator = new Layer({
        superLayer: slidFrom,
        height: 60,
        width: 200,
        x: -200 / 2 + options.knobSize / 2,
        y: -70,
        backgroundColor: null,
        style: {
          "textAlign": "center",
          "fontSize": options.valueSize,
          "color": options.valueColor
        }
      });
      toIndicator = new Layer({
        superLayer: slidTo,
        height: 60,
        width: 200,
        x: -200 / 2 + options.knobSize / 2,
        y: -70,
        backgroundColor: null,
        style: {
          "textAlign": "center",
          "fontSize": options.valueSize,
          "color": options.valueColor
        }
      });
    }
    ref = [slidFrom, slidTo];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      knob = ref[i];
      knob.draggable = true;
      knob.draggable.vertical = false;
      knob.draggable.overdrag = false;
      knob.draggable.momentum = false;
      knob.draggable.bounce = false;
      knob.draggable.constraints = {
        x: -options.knobSize / 2,
        width: options.width + options.knobSize
      };
      knob.on("change:x", function() {
        return giveMeRange();
      });
    }
    giveMeRange = function() {
      var fromR, tempHold, toR;
      if (slidFrom.midX >= slidTo.midX) {
        tempHold = slidTo.midX;
        slidTo.midX = slidFrom.midX;
        slidFrom.midX = tempHold;
      }
      sliderHLight.x = slidFrom.x + options.knobSize / 2;
      sliderHLight.width = slidTo.x - slidFrom.x;
      fromR = Utils.modulate(slidFrom.midX, [0, options.width], [options.from, options.to]);
      toR = Utils.modulate(slidTo.midX, [0, options.width], [options.from, options.to]);
      if (options.showValue) {
        fromIndicator.html = "" + options.currency + (Math.floor(fromR));
        toIndicator.html = "" + options.currency + (Math.floor(toR));
      }
      options.bottom = fromR;
      options.top = toR;
      return {
        from: fromR,
        to: toR
      };
    };
    this.goToRange = function(min, max) {
      var animationA, animationB, maximum, minimum;
      minimum = Utils.modulate(min, [options.from, options.to], [0, options.width]);
      maximum = Utils.modulate(max, [options.from, options.to], [0, options.width]);
      animationA = new Animation(slidFrom, {
        midX: minimum,
        options: {
          curve: "ease-in-out",
          time: .2
        }
      });
      animationB = new Animation(slidTo, {
        midX: maximum,
        options: {
          curve: "ease-in-out",
          time: .2
        }
      });
      animationA.start();
      return animationB.start();
    };
    this.goToRange(options.bottom, options.top);
  }

  RangeFilter.prototype.goTo = function(from, to) {
    return this.goToRange(from, to);
  };

  RangeFilter.define('bottom', {
    get: function() {
      return this.options.bottom;
    },
    set: function(value) {
      return this.options.bottom = value;
    }
  });

  RangeFilter.define('top', {
    get: function() {
      return this.options.top;
    },
    set: function(value) {
      return this.options.top = value;
    }
  });

  return RangeFilter;

})(Layer);


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
